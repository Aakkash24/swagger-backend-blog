---
swagger: "2.0"
info:
  description: "This is the documentation about the Blog website"
  version: "1.0.0"
  title: "Ethereal Essays"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "aakkash@gmail.com"
tags:
- name: "Storage"
  description: "API for storing image"
  externalDocs:
    description: "Find out more"
    url: "https://blog-backend-temp.vercel.app/blog/uploadImage"
- name: "Blog"
  description: "API for Blog"
- name: "User"
  description: "Operations about user"
- name: "Authorization"
  description: "Authorizes the user based on JWT token"
paths:
  /images/{fileName}:
    get:
      tags:
      - "Storage"
      summary: Get an image by filename
      parameters:
        - in: path
          name: fileName
          schema:
            type: string
          required: true
          description: The filename of the image
      responses:
        200:
          description: Image found
        404:
         description: Image not found
 
  /user/login:
    post:
      summary: User Login
      description: Log in a user by providing email and password.
      tags:
       - User
      parameters:
        - in: body
          name: requestBody
          description: Request body
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
                description: Email of the user.
              password:
                type: string
                description: User password.
      responses:
        200:
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: './modelw//User.ts'  # Replace with the actual schema reference for a user
                  token:
                    type: string
                    description: JWT token for authentication
        400:
          description: Bad request. Invalid user data.
        404:
          description: User not found
        500:
          description: Internal server error

  /user/register:
    post:
      summary: Register a new user
      description: Register a new user with the provided details.
      tags:
       - User
      parameters:
        - in: body
          name: requestBody
          description: Request body
          required: true
          schema:
            type: object
            properties:
              username:
                type: string
                description: Username of the user.
              email:
                type: string
                description: Email of the user.
              password:
                type: string
                description: User password.
      responses:
        200:
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: './models/User.ts'
                  token:
                    type: string
                example:
                  user:
                    _id: "605c72a31c2e8c1f8872fb6b"
                    uname: JohnDoe
                    uemail: john@example.com
                  token: "jwt_token_here"
        400:
          description: Bad request or user already exists
        500:
          description: Internal server error
  /blog/getAll:
    get:
      summary: Get all blogs
      description: Retrieve a list of all blogs.
      tags:
        - Blog
      responses:
        200:
          description: A list of blogs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: './models/Blog'  
        400:
          description: Bad request. Unable to retrieve blogs.
        500:
          description: Internal server error
  /blog/find/{id}:
    get:
      summary: Get a blog by ID
      description: Get a blog by its unique identifier.
      tags:
        - Blog
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Blog ID
      responses:
        200:
          description: A blog object
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                  title:
                    type: string
                  content:
                    type: string
                  uid:
                    type: string
                required:
                  - _id
                  - title
                  - content
                  - uid
        404:
          description: Blog not found
        400:
          description: Bad request. Invalid blog ID format.
        500:
          description: Internal server error

  /images/{id}:
    get:
      summary: Retrieve an image by its ID.
      tags:
       - Blog
      description: Retrieve an image based on its ID.
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the image to retrieve.
          schema:
            type: string
      responses:
        '200':
          description: Image retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: ID of the image.
        '400':
          description: Bad request. Invalid image ID.
  
  /verify:
    post:
      summary: Verify user authentication
      description: Middleware to verify user authentication. Checks for a valid Bearer token in the Authorization header.
      tags:
       - Authorization
      responses:
        403:
          description: Not authorized or token expired
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string

  /blog/featured:
    get:
      summary: Get featured blogs
      description: Get a list of featured blogs
      tags:
        - Blog
      responses:
        200:
          description: A list of featured blogs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: './models/Blog'  
        400:
          description: Bad request. An error occurred while fetching featured blogs.
        500:
          description: Internal server error
 
  /blog/updateViews/{id}:
    get:
      summary: Update blog views
      description: Update the view count of a blog by its ID.
      tags:
        - Blog
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Blog ID
      responses:
        200:
          description: Blog view count updated successfully
        400:
          description: Bad request. Invalid blog ID or other error.
        404:
          description: Blog not found
        500:
          description: Internal server error
 
  /blog:
    post:
      summary: Create a new blog
      description: Create a new blog.
      tags:
        - Blog
      parameters:
        - in: body
          name: requestBody
          description: Request body
          required: true
          schema:
            type: object
            properties:
              title:
                type: string
                description: Blog title.
              desc:
                type: string
                description: Blog description.
              category:
                type: string
                description: Blog Category.
              photo:
                type: string
                description: Blog photo.
              required:
                - title
                - desc
                - category
                - photo
      responses:
        200:
          description: Blog created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  title:
                    type: string
                  desc:
                    type: string
                  category:
                    type: string
                  photo:
                    type: string
                required:
                  - title
                  - desc
                  - category
                  - photo
        400:
          description: Bad request. Invalid blog data.
        500:
          description: Internal server error
  
  /uploadImage:
    post:
      summary: Upload an image.
      tags:
        - Blog
      description: Uploads an image and returns its URL.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
      responses:
        '200':
          description: Image uploaded successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                    description: URL of the uploaded image.
        '400':
          description: Bad request. Invalid image data.

  /blog/updateBlog/{id}:
    put:
      summary: Update a blog post
      description: Update a blog post with the specified ID.
      tags:
        - Blog
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Blog ID to update
        - in: header
          name: Authorization
          schema:
            type: string
          required: true
          description: Bearer token for authentication
        - in: body
          name: requestBody
          description: Request body
          required: true
          schema:
            type: object
            properties:
              title:
                type: string
                description: Blog title.
              desc:
                type: string
                description: Blog description.
              category:
                type: string
                description: Blog Category.
      requestBody:
        description: Updated blog post object
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                desc:
                  type: string
                category:
                  type: string
              example:
                title: New Title
                desc: New Description
                category: New Category
      responses:
        200:
          description: Blog post updated successfully
          content:
            application/json:
              schema:
                $ref: './models/Blog'  
        400:
          description: Bad request. Invalid blog post data.
        403:
          description: Forbidden. Not authorized to update this blog post.
        404:
          description: Blog post not found
        500:
          description: Internal server error

  /blog/likeBlog/{id}:
    put:
      summary: Like or unlike a blog
      description: Like or unlike a blog by its ID.
      tags:
        - Blog
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Blog ID
      responses:
        200:
          description: Blog liked/unliked successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
        400:
          description: Bad request or error in liking/unliking the blog
        404:
          description: Blog not found
        500:
          description: Internal server error

  /blog/{id}:
    put:
      summary: Delete a blog by ID
      description: Delete a blog by its ID. Only the owner of the blog can perform this action.
      tags:
       - Blog
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Blog ID to delete
      responses:
        200:
          description: Blog deleted successfully
        400:
          description: Bad request. Invalid blog ID.
        403:
          description: Forbidden. Deletion can only be done by the owner of the blog.
        404:
          description: Blog not found
        500:
          description: Internal server error
 


definitions:
  User:
    type: "object"
    required:
      - "uname"
      - "uemail"
      - "upassword"
    properties:
      uname:
        type: "string"
      uemail:
        type: "string"
      upassword:
        type: "string"
  Blog:
    type: "object"
    required:
      - "uid"
      - "btitle"
      - "bdesc"
      - "bcat"
      - "bphoto"
    properties:
      uid:
        type: "mongoose.Types.ObjectId"
        format: "int64"
      btitle:
        type: "string"
      bdesc:
        type: "string"
      bcat:
        type: "string"
      bhpoto:
        type: "string"
      bviews:
        type: "integer"
      blikes:
        type: "[string]"
      featured:
        type: "boolean"
  Image:
    type: "object"
    required:
    - "img"
    properties:
      img:
        type: "string"
